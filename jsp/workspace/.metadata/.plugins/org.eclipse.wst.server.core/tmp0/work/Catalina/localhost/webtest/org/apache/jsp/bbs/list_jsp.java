/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.50
 * Generated at: 2021-10-01 08:13:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.bbs;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import bbs.*;
import utility.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("bbs");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("utility");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      bbs.BbsDAO dao = null;
      dao = (bbs.BbsDAO) _jspx_page_context.getAttribute("dao", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (dao == null){
        dao = new bbs.BbsDAO();
        _jspx_page_context.setAttribute("dao", dao, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
//BbsDAO dao = new BbsDAO(); 
      out.write('\r');
      out.write('\n');
//useBean과 같은 역할, 객체 생성 목적 
      out.write('\r');
      out.write('\n');

//검색관련
String col = Utility.checkNull(request.getParameter("col"));
String word = Utility.checkNull(request.getParameter("word"));
if(col.equals("total")) {
	word = "";//전체 검색하면 공란
}

//paging 관련
int nowPage = 1;
if(request.getParameter("nowPage") != null) {
	nowPage = Integer.parseInt(request.getParameter("nowPage"));
}

int recordPerPage = 10;//한 페이지당 출력할 레코드
int sno = ((nowPage-1) * recordPerPage) + 1;
int eno = nowPage * recordPerPage;

Map map = new HashMap();
map.put("col", col);
map.put("word", word);
map.put("sno", sno);
map.put("eno", eno);

List < BbsDTO > list = dao.list(map);

//페이징 컴포넌트, 토털 레코드 개수를 알아야 페이지 수 정해짐
int total = dao.total(col, word);
String paging = Utility.paging(total, nowPage, recordPerPage, col, word);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>homepage</title>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function read(bbsno) {\r\n");
      out.write("	let url = \"read.jsp\";\r\n");
      out.write("	url += \"?bbsno=\" + bbsno;\r\n");
      out.write("	url += \"&col=");
      out.print(col);
      out.write("\";\r\n");
      out.write("	url += \"&word=");
      out.print(word);
      out.write("\";\r\n");
      out.write("	url += \"&nowPage=");
      out.print(nowPage);
      out.write("\";\r\n");
      out.write("	\r\n");
      out.write("	location.href=url;\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/menu/top.jsp", out, false);
      out.write("\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<h1>게시판 목록</h1>\r\n");
      out.write("		<form class='form-inline' action='list.jsp'>\r\n");
      out.write("			<div class='form-group'>\r\n");
      out.write("				<select class=\"form-control\" name='col'>\r\n");
      out.write("					<option value=\"wname\" \r\n");
      out.write("					");
 if(col.equals("wname")) out.print("selected"); 
      out.write("\r\n");
      out.write("					>성명</option>\r\n");
      out.write("					<option value=\"title\" \r\n");
      out.write("					");
 if(col.equals("title")) out.print("selected"); 
      out.write("\r\n");
      out.write("					>제목</option>\r\n");
      out.write("					<option value=\"content\" \r\n");
      out.write("					");
 if(col.equals("content")) out.print("selected"); 
      out.write("\r\n");
      out.write("					>내용</option>\r\n");
      out.write("					<option value=\"title_content\" \r\n");
      out.write("					");
 if(col.equals("title_content")) out.print("selected"); 
      out.write("\r\n");
      out.write("					>제목+내용</option>\r\n");
      out.write("					<option value='total' \r\n");
      out.write("					");
 if(col.equals("total")) out.print("selected"); 
      out.write("\r\n");
      out.write("					>전체출력</option>\r\n");
      out.write("				</select>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class='form-group'>\r\n");
      out.write("				<input type='search' name=\"word\" value=\"");
      out.print(word );
      out.write("\" class=\"form-control\" placeholder='검색어를 입력하세요'>\r\n");
      out.write("			</div>\r\n");
      out.write("			<button class='btn'>검색</button>\r\n");
      out.write("			<button type='button' class='btn' onclick=\"location.href='createForm.jsp'\">등록</button>\r\n");
      out.write("		</form>\r\n");
      out.write("		<table class='table table-striped'>\r\n");
      out.write("\r\n");
      out.write("			<thead>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>번호</th>\r\n");
      out.write("					<th>제목</th>\r\n");
      out.write("					<th>작성자</th>\r\n");
      out.write("					<th>grpno</th>\r\n");
      out.write("					<th>indent</th>\r\n");
      out.write("					<th>ansnum</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</thead>\r\n");
      out.write("\r\n");
      out.write("			<tbody>\r\n");
      out.write("				");

				if (list.size() == 0) {
				
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan='6'>등록된 글이 없습니다.</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				");

				} else {
				for (int i = 0; i < list.size(); i++) {
					BbsDTO dto = list.get(i);
				
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>");
      out.print(dto.getBbsno());
      out.write("</td>\r\n");
      out.write("					<td>\r\n");
      out.write("					");

					for (int r = 0 ; r < dto.getIndent() ; r++){
						out.print("&nbsp;&nbsp;");
					}
					if(dto.getIndent() > 0) {
						out.print("<img src='../images/re.jpg'>");
					}
					
      out.write("\r\n");
      out.write("					<a href=\"javascript:read('");
      out.print(dto.getBbsno());
      out.write("')\">");
      out.print(dto.getTitle());
      out.write("</a>\r\n");
      out.write("					");
 if(Utility.compareDay(dto.getWdate())) { 
      out.write("\r\n");
      out.write("						<img src='../images/new.gif'>\r\n");
      out.write("					");
 } 
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("					<td>");
      out.print(dto.getWname());
      out.write("</td>\r\n");
      out.write("					<td>");
      out.print(dto.getGrpno());
      out.write("</td>\r\n");
      out.write("					<td>");
      out.print(dto.getIndent());
      out.write("</td>\r\n");
      out.write("					<td>");
      out.print(dto.getAnsnum());
      out.write("</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				");

				}
				}
				
      out.write("\r\n");
      out.write("			</tbody>\r\n");
      out.write("\r\n");
      out.write("		</table>\r\n");
      out.write("		");
      out.print(paging );
      out.write("\r\n");
      out.write("		<br>\r\n");
      out.write("		<br>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
